networks:
  esos_network:
    name: esos.docker.internal
    driver: bridge

services:
  app-api:
    build:
      context: uk-esos-app-api
      dockerfile: Dockerfile
    volumes:
      - ./certs/dockerhost-root-ca.crt:/tmp/dockerhost-root-ca.crt
    hostname: api.esos.docker.internal
    networks:
      esos_network:
        aliases:
          - api.local
          - api.esos.docker.internal
    extra_hosts:
      - "host.docker.internal:host-gateway"
    environment:
      - ALLOWED_FILE_MIME_TYPES=${ALLOWED_FILE_MIME_TYPES}
      - API_ALLOWED_ORIGINS=${API_ALLOWED_ORIGINS}
      - API_APPLICATION_PORT=${API_APPLICATION_PORT}
      - API_APPLICATION_WEB_URL=${API_APPLICATION_WEB_URL}
      - API_CHANGE_2FA_EXP_MINS=${API_CHANGE_2FA_EXP_MINS}
      - API_CONTEXT_PATH=${API_CONTEXT_PATH}
      - API_DB_PASSWORD=${API_DB_PASSWORD}
      - API_DB_URL=${API_DB_URL}
      - API_DB_USERNAME=${API_DB_USERNAME}
      - API_ESOS_HELPDESK=${API_ESOS_HELPDESK}
      - API_IS_PROD=${API_IS_PROD}
      - API_KEYCLOAK_MAIL_SENDER=${API_KEYCLOAK_MAIL_SENDER}
      - API_KEYCLOAK_REALM=${API_KEYCLOAK_REALM}
      - API_KEYCLOAK_SERVERURL=${API_KEYCLOAK_SERVERURL}
      - API_LIQUIBASE_PASSWORD=${API_LIQUIBASE_PASSWORD}
      - API_LIQUIBASE_USERNAME=${API_LIQUIBASE_USERNAME}
      - API_LOG_LEVEL=${API_LOG_LEVEL}
      - API_LOG_LEVEL_APACHE_FOP=${API_LOG_LEVEL_APACHE_FOP}
      - API_LOG_LEVEL_DOCX4J=${API_LOG_LEVEL_DOCX4J}
      - API_MAIL_HOST=${API_MAIL_HOST}
      - API_MAIL_PASSWORD=${API_MAIL_PASSWORD}
      - API_MAIL_PORT=${API_MAIL_PORT}
      - API_MAIL_PROTOCOL=${API_MAIL_PROTOCOL}
      - API_MAIL_SMTPS_AUTH=${API_MAIL_SMTPS_AUTH}
      - API_MAIL_SMTPS_SSL_ENABLE=${API_MAIL_SMTPS_SSL_ENABLE}
      - API_MAIL_SMTPS_STARTTLS_ENABLE=${API_MAIL_SMTPS_STARTTLS_ENABLE}
      - API_MAIL_SMTP_AUTH=${API_MAIL_SMTP_AUTH}
      - API_MAIL_SMTP_STARTTLS_ENABLE=${API_MAIL_SMTP_STARTTLS_ENABLE}
      - API_MAIL_USERNAME=${API_MAIL_USERNAME}
      - API_READONLY_DB_PASSWORD_EA=${API_READONLY_DB_PASSWORD_EA}
      - API_READONLY_DB_PASSWORD_NIEA=${API_READONLY_DB_PASSWORD_NIEA}
      - API_READONLY_DB_PASSWORD_NRW=${API_READONLY_DB_PASSWORD_NRW}
      - API_READONLY_DB_PASSWORD_OPRED=${API_READONLY_DB_PASSWORD_OPRED}
      - API_READONLY_DB_PASSWORD_SEPA=${API_READONLY_DB_PASSWORD_SEPA}
      - API_READONLY_DB_URL=${API_READONLY_DB_URL}
      - API_SWAGGER_ENABLED=${API_SWAGGER_ENABLED}
      - API_USER_INVITATION_EXP_MINS=${API_USER_INVITATION_EXP_MINS}
      - AWS_ACCESS_KEY_ID=${AWS_ACCESS_KEY_ID}
      - AWS_DEFAULT_REGION=${AWS_DEFAULT_REGION}
      - AWS_SECRET_ACCESS_KEY=${AWS_SECRET_ACCESS_KEY}
      - CAMUNDA_IDENTITY_SERVICE_SECRET=${CAMUNDA_IDENTITY_SERVICE_SECRET}
      - CAMUNDA_JOB_EXECUTION_CORE_POOL_SIZE=${CAMUNDA_JOB_EXECUTION_CORE_POOL_SIZE}
      - CAMUNDA_JOB_EXECUTION_MAX_POOL_SIZE=${CAMUNDA_JOB_EXECUTION_MAX_POOL_SIZE}
      - CA_CENTRAL_INFO=${CA_CENTRAL_INFO}
      - CLAMAV_HOST=${CLAMAV_HOST}
      - CLAMAV_PORT=${CLAMAV_PORT}
      - CLOUDWATCH_METRICS_AWSENDPOINTURL=${CLOUDWATCH_METRICS_AWSENDPOINTURL}
      - CLOUDWATCH_METRICS_BATCHSIZE=${CLOUDWATCH_METRICS_BATCHSIZE}
      - CLOUDWATCH_METRICS_ENABLED=${CLOUDWATCH_METRICS_ENABLED}
      - CLOUDWATCH_METRICS_NAMESPACE=${CLOUDWATCH_METRICS_NAMESPACE}
      - CLOUDWATCH_METRICS_STEP=${CLOUDWATCH_METRICS_STEP}
      - DISABLED_WORKFLOWS=${DISABLED_WORKFLOWS}
      - ESOS_APP_API_CLIENT_SECRET=${ESOS_APP_API_CLIENT_SECRET}
      - ESOS_UI_ANALYTICS_MEASUREMENTID=${ESOS_UI_ANALYTICS_MEASUREMENTID}
      - ESOS_UI_ANALYTICS_PROPERTYID=${ESOS_UI_ANALYTICS_PROPERTYID}
      - ESOS_UI_FEATURES_AVIATION=${ESOS_UI_FEATURES_AVIATION}
      - GOVUK_PAY_IS_ACTIVE=${GOVUK_PAY_IS_ACTIVE}
      - HIKARI_MAX_POOL_SIZE=${HIKARI_MAX_POOL_SIZE}
      - LOG4J2_CONFIG_FILE=${LOG4J2_CONFIG_FILE}
      - REGISTRY_ADMINISTRATOR_EMAIL=${REGISTRY_ADMINISTRATOR_EMAIL}
      - SQL_LOG_LEVEL=${SQL_LOG_LEVEL}
      - SQL_PARAMS_LOG_LEVEL=${SQL_PARAMS_LOG_LEVEL}
      - USER_FEEDBACK_RECIPIENTS=${USER_FEEDBACK_RECIPIENTS}
    ports:
      - 8080:8080
    depends_on:
      maildev:
        condition: service_healthy
      app-db:
        condition: service_healthy
      keycloak:
        condition: service_healthy
      proxy:
        condition: service_started

  app-web:
    build:
      context: uk-esos-app-web
      dockerfile: Dockerfile.dev
    hostname: web.esos.docker.internal
    networks:
      esos_network:
        aliases:
          - web.local
          - web.esos.docker.internal
    extra_hosts:
      - "host.docker.internal:host-gateway"
    volumes:
      - ./uk-esos-app-web:/app
      - ./uk-esos-app-web/node_modules:/app/node_modules
    environment:
      - NODE_ENV=development
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:4200/"]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 60s
    depends_on:
      app-api:
        condition: service_started
      keycloak:
        condition: service_healthy

  # keycloak:
  keycloak:
    build:
      context: uk-esos-keycloak
      dockerfile: Dockerfile
    # image: keycloak-esos:latest
    hostname: keycloak.esos.docker.internal
    networks:
      esos_network:
        aliases:
          - keycloak.local
          - keycloak.esos.docker.internal
    extra_hosts:
      - "host.docker.internal:host-gateway"
    environment:
      - STARTUP_COMMAND=start-dev
      # - KC_LOG_LEVEL=DEBUG
      - KC_DB=postgres
      - KC_DB_URL=jdbc:postgresql://keycloak-db.esos.docker.internal:5432/${KC_POSTGRES_DB}
      - KC_DB_USERNAME=${KC_POSTGRES_USER}
      - KC_DB_PASSWORD=${KC_POSTGRES_PASSWORD}
      - KC_PROXY_HEADERS=xforwarded
      - KC_HTTP_ENABLED=true
      - KC_HTTP_PORT=8091
      - KC_HTTP_RELATIVE_PATH=/auth
      - KC_HOSTNAME_STRICT=false
      - KC_BOOTSTRAP_ADMIN_USERNAME=${KC_BOOTSTRAP_ADMIN_USERNAME}
      - KC_BOOTSTRAP_ADMIN_PASSWORD=${KC_BOOTSTRAP_ADMIN_PASSWORD}
      - UK_ESOS_REALM_DISPLAY_NAME=${UK_ESOS_REALM_DISPLAY_NAME}
      - ESOS_WEB_APP_URL=${API_APPLICATION_WEB_URL}
      - ESOS_ADMIN_APP_URL=${ESOS_ADMIN_APP_URL}
      - ESOS_APP_API_CLIENT_SECRET=${ESOS_APP_API_CLIENT_SECRET}
      - CAMUNDA_IDENTITY_SERVICE_SECRET=${CAMUNDA_IDENTITY_SERVICE_SECRET}
      - MAIL_TLS=${API_MAIL_SMTP_STARTTLS_ENABLE}
      - MAIL_AUTH=${API_MAIL_SMTP_AUTH}
      - MAIL_PORT=${API_MAIL_PORT}
      - MAIL_HOST=${API_MAIL_HOST}
      - MAIL_FROM=${API_KEYCLOAK_MAIL_SENDER}
      - MAIL_SSL=${API_MAIL_SMTPS_SSL_ENABLE}
      - MAIL_USER=${API_MAIL_USERNAME}
      - MAIL_PASSWORD=${API_MAIL_PASSWORD}
    healthcheck:
      test:
        [
          "CMD-SHELL",
          "exec 3<> /dev/tcp/127.0.0.1/9000; echo -e 'GET /health/ready HTTP/1.1\\r\\nHost: localhost\\r\\nConnection: close\\r\\n\\r\\n' >&3; if [ $? -eq 0 ]; then echo 'Healthcheck Successful'; exit 0; else echo 'Healthcheck Failed'; exit 1; fi;",
        ]
      start_period: 5s
    depends_on:
      keycloak-db:
        condition: service_healthy
    ports:
      - 8091:8091
      - 8999:9000

  app-db:
    image: postgres:latest
    hostname: app-db.esos.docker.internal
    networks:
      esos_network:
        aliases:
          - app-db.local
          - app-db.esos.docker.internal
    extra_hosts:
      - "host.docker.internal:host-gateway"
    environment:
      - POSTGRES_DB=${API_DB_NAME}
      - POSTGRES_USER=${API_DB_USERNAME}
      - POSTGRES_PASSWORD=${API_DB_PASSWORD}
    volumes:
      - postgres_app:/var/lib/postgresql/data
    ports:
      - 5433:5432
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -d $$POSTGRES_DB -U $$POSTGRES_USER"]
      interval: 10s
      timeout: 5s
      retries: 5

  # keycloak-db:
  keycloak-db:
    image: postgres:latest
    hostname: keycloak-db.esos.docker.internal
    networks:
      esos_network:
        aliases:
          - keycloak-db.local
          - keycloak-db.esos.docker.internal
    extra_hosts:
      - "host.docker.internal:host-gateway"
    environment:
      - POSTGRES_DB=${KC_POSTGRES_DB}
      - POSTGRES_USER=${KC_POSTGRES_USER}
      - POSTGRES_PASSWORD=${KC_POSTGRES_PASSWORD}
    volumes:
      - postgres_keycloak:/var/lib/postgresql/data
    ports:
      - 5432:5432
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -d $$POSTGRES_DB -U $$POSTGRES_USER"]
      interval: 10s
      timeout: 5s
      retries: 5

  proxy:
    build:
      context: .
      dockerfile: Dockerfile.proxy
    hostname: proxy.esos.docker.internal
    networks:
      esos_network:
        aliases:
          - proxy.local
          - proxy.esos.docker.internal
    extra_hosts:
      - "host.docker.internal:host-gateway"
    ports:
      - "80:80"
      - "443:443"

  # maintenance:
  # cookies:

  # mail server
  maildev:
    container_name: maildev
    image: maildev/maildev
    hostname: maildev.esos.docker.internal
    networks:
      esos_network:
        aliases:
          - maildev.local
          - maildev.esos.docker.internal
    extra_hosts:
      - "host.docker.internal:host-gateway"
    ports:
      - "1080:1080"
      - "1025:1025"
    healthcheck:
      test:
        [
          "CMD",
          "wget",
          "--no-verbose",
          "--tries=1",
          "--spider",
          "http://localhost:1080",
        ]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 10s

volumes:
  postgres_app:
  postgres_keycloak:
